//Objeto literal

  let funcionario = {email: 'abc@abc.com'};

//Proxy que exibe no console o valor da propriedade antes dela ser alterada e o valor novo.

  let funcionario = {email: 'abc@abc.com'};
  let funcionarioProxy = new Proxy(funcionario,  {

    set(target, prop, value, receiver) {
        console.log(`Valor antigo ${target[prop]}, valor atual: ${value}`);
        return Reflect.set(target, prop, value, receiver);
    }

});
  funcionarioProxy.email = 'aaa@aaa.com';

//Percebe-se que foi usado set no handler passado para o proxy. Além disso, deve-se ter muito cuidado que quando usado o 
  set, a função deve receber quatro parâmetros e não três, como no caso do get.

//Pode-se conseguir o mesmo resultado desta forma:

  let funcionario = {email: 'abc@abc.com'};
  let funcionarioProxy = new Proxy(funcionario,  {

    set(target, prop, value, receiver) {
        console.log(`Valor antigo ${target[prop]}, valor atual: ${value}`);
        target[prop] = value;
    }

});
  funcionarioProxy.email = 'aaa@aaa.com';

//A diferença é que a última solução altera diretamente o valor do objeto encapsulado. A primeira forma, com 
  Reflect.set sempre deve retornar um valor, que é uma função que será chamada para realizar a operação de atribuição. 
  Por enquanto, pode-se usar uma ou outra forma que o resultado será o mesmo.
