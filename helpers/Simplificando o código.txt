//Código

  let dadosServidor = [
    [
        [new Date(), 1, 100],
        [new Date(), 2, 100]
    ],
    [
        [new Date(), 1, 150],
        [new Date(), 2, 300]
    ],
    [
        [new Date(), 3, 50],
        [new Date(), 1, 100]
    ]        
];

//Se quiser criar um array de uma única dimensão para depois criar uma lista de negociações a partir da classe Negociacao 
  deve ser feito:

  let listaDeNegociacoes = dadosServidor.reduce((novoArray, array) => {
    // novoArray receberá os itens de array, no final terá uma dimensão apenas
    return novoArray.concat(array)
}, [])
.map(dado => {
    // para cada dado, cria uma instância de negociação. No final, teremos uma nova lista só com instâncias de Negociacao

    return new Negociacao(new Date(dado.data), dado.quantidade, dado.valor )
});

//O código acima funciona, contudo,muitas chaves das declarações das arrow functions podem ser removidas.

  let listaDeNegociacoes = dadosServidor
      .reduce((novoArray, array) => novoArray.concat(array), [])
      .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));

//Percebe-se que foi removido as {} e o return das arrows functions. Só pode fazer isso quando o que vem depois de => é uma
  instrução apenas, ou seja, não é um bloco de instruções. Aliás, repare-se também na maneira com que o código foi
  indentado.

//Há também quem goste de indentar assim:

  let listaDeNegociacoes = dadosServidor
    .reduce((novoArray, array)  => novoArray.concat(array), [])
    .map(dado => 
        new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));

//Ou assim:

  let listaDeNegociacoes = 
    dadosServidor
        .reduce((novoArray, array) => novoArray.concat(array), [])
        .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));

//E quem sabe assim?

  let listaDeNegociacoes = 
    dadosServidor
        .reduce((novoArray, array) => 
            novoArray.concat(array), [])
        .map(dado => 
            new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));

//O que estaria errado e por conseguinte não funcionaria é quebrar o código antes da flecha =>:

  // Não funciona! Não pode quebrar antes da flecha! 

let listaDeNegociacoes = 
    dadosServidor
        .reduce((novoArray, array) 
            => novoArray.concat(array), [])
        .map(dado
             => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));









